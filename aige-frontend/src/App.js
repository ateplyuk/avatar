// aige-frontend/src/App.js
import React, { useState } from 'react';
import './App.css'; // Make sure this file exists or is created
import Step0Finetune from './components/Step0Finetune';
import Step1Avatar from './components/Step1Avatar';
import Step2Background from './components/Step2Background';
import Step3Overlay from './components/Step3Overlay';
import TaskStatus from './components/TaskStatus';
import Step1FluxUltra from './components/Step1FluxUltra';
import Step4Upscale from './components/Step4Upscale';

function App() {
  const [avatarDetails, setAvatarDetails] = useState({
    id: null, // This is the avatar_id generated by Step1Avatar client-side
    aigeTaskId: null,
    readUrl: null, // readUrl for the avatar image itself
  });

  const [backgroundDetails, setBackgroundDetails] = useState({
    aigeTaskId: null,
    readUrl: null, // readUrl for the background image
  });

  const [overlayDetails, setOverlayDetails] = useState({
    aigeTaskId: null,
    readUrl: null, // readUrl for the overlay image
  });

  const [upscaleDetails, setUpscaleDetails] = useState({
    aigeTaskId: null,
    readUrl: null,
  });

  const handleAvatarSuccess = ({ avatarId, aigeTaskId, readUrl }) => {
    setAvatarDetails({ id: avatarId, aigeTaskId: aigeTaskId, readUrl: readUrl });
    // Reset background and overlay details if a new avatar is generated
    setBackgroundDetails({ aigeTaskId: null, readUrl: null });
    setOverlayDetails({ aigeTaskId: null, readUrl: null });
  };

  const handleBackgroundSuccess = ({ aigeTaskId, readUrl }) => {
    setBackgroundDetails({ aigeTaskId: aigeTaskId, readUrl: readUrl });
    // Reset overlay details if a new background is generated
    setOverlayDetails({ aigeTaskId: null, readUrl: null });
  };

  const handleOverlaySuccess = ({ aigeTaskId, readUrl }) => {
    setOverlayDetails({ aigeTaskId: aigeTaskId, readUrl: readUrl });
  };

  const handleUpscaleSuccess = ({ aigeTaskId, readUrl }) => {
    setUpscaleDetails({ aigeTaskId, readUrl });
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>AIGE Frontend API Tester</h1>
      </header>
      <main className="App-main">
        <section className="step-section">
          <Step0Finetune />
        </section>
        <section className="step-section">
          <Step1FluxUltra />
        </section>
        <section className="step-section">
          <Step1Avatar onAvatarSuccess={handleAvatarSuccess} />
          {avatarDetails.aigeTaskId && (
            <TaskStatus
              aigeTaskId={avatarDetails.aigeTaskId}
              label="Avatar Generation Status"
            />
          )}
        </section>

        {/* Conditionally render Step 2 only if an avatar has been initiated */}
        {avatarDetails.id && (
          <section className="step-section">
            <Step2Background
              avatarId={avatarDetails.id}
              onBackgroundSuccess={handleBackgroundSuccess}
            />
            {backgroundDetails.aigeTaskId && (
              <TaskStatus
                aigeTaskId={backgroundDetails.aigeTaskId}
                label="Background Generation Status"
              />
            )}
          </section>
        )}

        {/* Conditionally render Step 3 only if both avatar and background have been initiated */}
        {avatarDetails.id && backgroundDetails.readUrl && (
          <section className="step-section">
            <Step3Overlay
              avatarId={avatarDetails.id}
              personImageUrl={avatarDetails.readUrl}
              backgroundImageUrl={backgroundDetails.readUrl}
              onOverlaySuccess={handleOverlaySuccess}
            />
            {overlayDetails.aigeTaskId && (
              <TaskStatus
                aigeTaskId={overlayDetails.aigeTaskId}
                label="Overlay Generation Status"
              />
            )}
          </section>
        )}

        {/* Step 4: Upscale - show if avatarId exists (optionally require overlayDetails.readUrl for strict sequence) */}
        {avatarDetails.id && (
          <section className="step-section">
            <Step4Upscale avatarId={avatarDetails.id} onUpscaleSuccess={handleUpscaleSuccess} />
            {upscaleDetails.aigeTaskId && (
              <TaskStatus
                aigeTaskId={upscaleDetails.aigeTaskId}
                label="Upscale Status"
              />
            )}
          </section>
        )}
      </main>
      <footer className="App-footer">
        <p>AIGE Test Frontend</p>
        {/* This is a good place to show combined results or global errors if any */}
      </footer>
    </div>
  );
}

export default App;